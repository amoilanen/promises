Article:

http://www.html5rocks.com/en/tutorials/es6/promises/

API:

Static Methods

Promise.cast(promise);
Returns promise (only if promise.constructor == Promise)
Note: Only implemented in Chrome so far

Promise.cast(obj);
Make a promise that fulfills to obj.
Note: Only implemented in Chrome so far

Promise.resolve(thenable);
Make a new promise from the thenable. A thenable is promise-like in as far as it has a "then" method. This also creates a new promise if you pass it a genuine JavaScript promise, making it less efficient for casting than Promise.cast.
Note: Chrome incorrectly calls this Promise.resolved

Promise.resolve(obj);
Make a promise that fulfills to obj. Same as Promise.cast(obj) in this situation.
Note: Chrome incorrectly calls this Promise.resolved

Promise.reject(obj);
Make a promise that rejects to obj. For consistency and debugging (eg stack traces), obj should be an instanceof Error
Note: Chrome incorrectly calls this Promise.rejected

Promise.all(array);
Make a promise that fulfills when every item in the array fulfills, and rejects if (and when) any item rejects. Eadd array item is passed to Promise.cast, so the array can be a mixture of promise-like objects and other objects. The fulfillment value is an array (in order) of fulfillment values. The rejection value is the first rejection value.
Note: Only implemented in Chrome so far

Promise.race(array);
Make a Promise that fulfills when any item fulfills, and rejects if any item rejects.
Note: Only implemented in Chrome as Promise.one. Also, I'm unconvinced of it's usefulness, I'd rather have an opposite of Promise.all that only rejected if all items rejected.

Constructor

new Promise(function(resolve, reject) {});
resolve(thenable)
Your promise will be fulfilled/rejected with the outcome of thenable
resolve(obj)
Your promise is fulfilled with obj
reject(obj)
Your promise is rejected with obj. For consistency and debugging (eg stack traces), obj should be an instanceof Error. Any errors thrown in the constructor callback will be implicitly passed to reject().
Instance Methods

promise.then(onFulfilled, onRejected)
onFulfilled is called when/if "promise" resolves. onRejected is called when/if "promise" rejects. Both are optional, if either/both are omitted the next onFulfilled/onRejected in the chain is called. Both callbacks have a single parameter , the fulfillment value or rejection reason. "then" returns a new promise equivalent to the value you return from onFulfilled/onRejected after being passed through Promise.resolve. If an error is thrown in the callback, the returned promise rejects with that error.
promise.catch(onRejected)
Sugar for promise.then(undefined, onRejected)
Many thanks to Anne van Kesteren, Domenic Denicola, Tom Ashworth, Remy Sharp, Addy Osmani, Arthur Evans, and Yutaka Hirano who proofread this and made corrections/recommendations.